<h1>About</h1>
<p>課程名稱: 協同產品設計實習 - Collaborative Product Design Practice</p>
<p>學員作業網站: <a class="Link--inTextBlock" href="https://mdecd2025.github.io/hw-41223105/">https://mdecd2025.github.io/hw-41223105/</a></p>
<p>學員作業倉儲: <a href="https://github.com/mdecd2025/hw-41223105">https://github.com/mdecd2025/hw-41223105</a></p>
<hr/>
<p>課程代號: cd2025</p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入<span> </span><a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a><span> </span>Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span>p5z4eku</span></p>
<hr/>
<p>課程評分:</p>
<p style="padding-left: 30px;">Homework (30%) - 每週至少提交兩次與課程進度有關的內容, 完成後填回自評表單</p>
<p style="padding-left: 30px;">Exam (40%) - 建立包含操作流程影片、心得以及提供檔案下載的網頁後填回自評表單</p>
<p style="padding-left: 30px;">Final Report (30%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告, 完成後填回自評表單</p>
<h1>List</h1>
<p><a href="https://mdecd2025.github.io/hw-41223105/content/Brython.html?src=https://gist.githubusercontent.com/41223105/24709c33e160432c3abdd590217ba42d/raw/9c125afbd10054961e57106a6f4191a60d391252/2a-g8" title="2a-g8">2a-g8</a></p>
<h1>Tasks</h1>
<h2>Task5</h2>
<h4>Webots Tutorial 1 ~3 (HW3)</h4>
<p><a href="https://cyberbotics.com/doc/guide/introduction-to-webots">https://cyberbotics.com/doc/guide/introduction-to-webots</a></p>
<p>3.請摘要出下列內容: (放入英文文章內容)</p>
<p>A:Here’s a summary of the key points about Webots:</p>
<ul data-end="1962" data-is-last-node="" data-is-only-node="" data-start="50">
<li data-end="422" data-start="50">
<p data-end="422" data-start="52"><strong data-end="71" data-start="52">What is Webots?</strong> Webots is a professional simulation software for mobile robots that allows users to create 3D virtual environments with physical properties. It supports robots with different locomotion types (wheeled, legged, flying) and various sensors/actuators. Users can program robots to perform specific behaviors and simulate them in realistic environments.</p>
</li>
<li data-end="785" data-start="424">
<p data-end="512" data-start="426"><strong data-end="443" data-start="426">Applications:</strong> Webots is widely used in research and education, particularly for:</p>
<ul data-end="785" data-start="515">
<li data-end="541" data-start="515">Mobile robot prototyping</li>
<li data-end="598" data-start="544">Locomotion research (e.g., legged robots, humanoids)</li>
<li data-end="689" data-start="601">Multi-agent and adaptive behavior research (e.g., swarm intelligence, neural networks)</li>
<li data-end="759" data-start="692">Teaching robotics (programming in languages like C, Python, Java)</li>
<li data-end="785" data-start="762">Robotics competitions</li>
</ul>
</li>
<li data-end="1029" data-start="787">
<p data-end="1029" data-start="789"><strong data-end="815" data-start="789">What You Need to Know:</strong> Basic knowledge of programming languages (C, C++, Java, Python, MATLAB) is required for writing robot controllers. Basic knowledge of 3D graphics and VRML97 is needed for creating custom robot models or objects.</p>
</li>
<li data-end="1204" data-start="1031">
<p data-end="1204" data-start="1033"><strong data-end="1050" data-start="1033">User Support:</strong> Cyberbotics offers paid support. For community-based support, users can turn to Robotics StackExchange, GitHub Discussions, GitHub Issues, and Discord.</p>
</li>
<li data-end="1476" data-start="1206">
<p data-end="1269" data-start="1208"><strong data-end="1234" data-start="1208">Simulation Components:</strong> A Webots simulation consists of:</p>
<ul data-end="1476" data-start="1272">
<li data-end="1340" data-start="1272">A world file (.wbt) that defines the robots and their environment.</li>
<li data-end="1426" data-start="1343">Controller programs written in supported languages (C/C++, Java, Python, MATLAB).</li>
<li data-end="1476" data-start="1429">Optional physics plugins for custom behavior.</li>
</ul>
</li>
<li data-end="1717" data-start="1478">
<p data-end="1717" data-start="1480"><strong data-end="1505" data-start="1480">World and Controller:</strong> A world in Webots describes the robots and their environment (position, appearance, physics, etc.). The controller is a program that controls the robot’s actions, and each robot can have a separate controller.</p>
</li>
<li data-end="1962" data-is-last-node="" data-start="1719">
<p data-end="1962" data-is-last-node="" data-start="1721"><strong data-end="1747" data-start="1721">Supervisor Controller:</strong> A Supervisor controller is a special type of controller that allows for privileged operations, like controlling the simulation, changing robot positions, or capturing videos, and is used to oversee robot actions.</p>
</li>
</ul>
<p></p>
<p>4.請列出上述文章中的重要的英文單字與解釋, 以及出現在文句中的用法:</p>
<p data-end="29" data-start="0">A:以下是文章中重要的英文單字與解釋，以及它們在文句中的用法：</p>
<p><br/>1. <strong data-end="55" data-start="36">Simulation (模擬)</strong></p>
<ul data-end="213" data-start="59">
<li data-end="90" data-start="59"><strong data-end="67" data-start="61">解釋</strong>: 創建虛擬環境來模擬現實世界中的行為或系統。</li>
<li data-end="169" data-start="94"><strong data-end="102" data-start="96">用法</strong>: "Webots is a professional simulation software for mobile robots."</li>
<li data-end="213" data-start="173"><strong data-end="181" data-start="175">解釋</strong>: 指創建虛擬的 3D 世界，讓機器人可以在其中進行測試和互動。</li>
</ul>
<p><br/>2. <strong data-end="243" data-start="222">Locomotion (運動機制)</strong></p>
<ul data-end="414" data-start="247">
<li data-end="282" data-start="247"><strong data-end="255" data-start="249">解釋</strong>: 機器人移動的能力或機制，如輪式、腿式或飛行機器人。</li>
<li data-end="375" data-start="286"><strong data-end="294" data-start="288">用法</strong>: "It supports robots with different locomotion types (wheeled, legged, flying)."</li>
<li data-end="414" data-start="379"><strong data-end="387" data-start="381">解釋</strong>: 描述機器人如何移動，無論是使用輪子、腿部還是飛行。</li>
</ul>
<p><br/>3. <strong data-end="440" data-start="423">Sensors (感測器)</strong></p>
<ul data-end="589" data-start="444">
<li data-end="479" data-start="444"><strong data-end="452" data-start="446">解釋</strong>: 用來偵測物理屬性（例如距離、運動、溫度等）的裝置。</li>
<li data-end="545" data-start="483"><strong data-end="491" data-start="485">用法</strong>: "It supports robots with various sensors/actuators."</li>
<li data-end="589" data-start="549"><strong data-end="557" data-start="551">解釋</strong>: 指幫助機器人收集周圍環境資訊的硬體裝置，如相機或距離感測器。</li>
</ul>
<p><br/>4. <strong data-end="617" data-start="598">Actuators (執行器)</strong></p>
<ul data-end="768" data-start="621">
<li data-end="657" data-start="621"><strong data-end="629" data-start="623">解釋</strong>: 根據控制器指令執行動作的裝置，例如馬達、輪子或手臂。</li>
<li data-end="723" data-start="661"><strong data-end="669" data-start="663">用法</strong>: "It supports robots with various sensors/actuators."</li>
<li data-end="768" data-start="727"><strong data-end="735" data-start="729">解釋</strong>: 這些是讓機器人與環境互動的元件，例如移動的部件或執行特定動作。</li>
</ul>
<p><br/>5. <strong data-end="799" data-start="777">Programming (程式設計)</strong></p>
<ul data-end="967" data-start="803">
<li data-end="831" data-start="803"><strong data-end="811" data-start="805">解釋</strong>: 撰寫程式碼來控制機器人或系統的行為。</li>
<li data-end="931" data-start="835"><strong data-end="843" data-start="837">用法</strong>: "Basic knowledge of programming languages (C, C++, Java, Python, MATLAB) is required."</li>
<li data-end="967" data-start="935"><strong data-end="943" data-start="937">解釋</strong>: 編寫程式碼指示機器人如何行動或執行特定任務。</li>
</ul>
<p><br/>6. <strong data-end="998" data-start="976">Prototyping (原型設計)</strong></p>
<ul data-end="1132" data-start="1002">
<li data-end="1029" data-start="1002"><strong data-end="1010" data-start="1004">解釋</strong>: 設計和測試機器人或系統的初步版本。</li>
<li data-end="1096" data-start="1033"><strong data-end="1041" data-start="1035">用法</strong>: "Webots is widely used for mobile robot prototyping."</li>
<li data-end="1132" data-start="1100"><strong data-end="1108" data-start="1102">解釋</strong>: 創建機器人的初步模型或草圖，用於測試和開發。</li>
</ul>
<p><br/>7. <strong data-end="1162" data-start="1141">Multi-agent (多代理)</strong></p>
<ul data-end="1341" data-start="1166">
<li data-end="1199" data-start="1166"><strong data-end="1174" data-start="1168">解釋</strong>: 指多個自主實體或機器人一起工作或在系統中互動。</li>
<li data-end="1302" data-start="1203"><strong data-end="1211" data-start="1205">用法</strong>: "Multi-agent and adaptive behavior research (e.g., swarm intelligence, neural networks)."</li>
<li data-end="1341" data-start="1306"><strong data-end="1314" data-start="1308">解釋</strong>: 涉及多個機器人協作、共享數據或共同完成目標的研究。</li>
</ul>
<p><br/>8. <strong data-end="1379" data-start="1350">Adaptive Behavior (適應性行為)</strong></p>
<ul data-end="1556" data-start="1383">
<li data-end="1419" data-start="1383"><strong data-end="1391" data-start="1385">解釋</strong>: 系統（機器人）根據環境變化或經驗來調整其行為的能力。</li>
<li data-end="1506" data-start="1423"><strong data-end="1431" data-start="1425">用法</strong>: "Adaptive behavior research (e.g., swarm intelligence, neural networks)."</li>
<li data-end="1556" data-start="1510"><strong data-end="1518" data-start="1512">解釋</strong>: 聚焦於機器人如何透過學習或 AI 調整行為，例如使用機器學習或神經網絡。</li>
</ul>
<p><br/>9. <strong data-end="1585" data-start="1565">Controller (控制器)</strong></p>
<ul data-end="1750" data-start="1589">
<li data-end="1610" data-start="1589"><strong data-end="1597" data-start="1591">解釋</strong>: 控制機器人行為的程式。</li>
<li data-end="1707" data-start="1614"><strong data-end="1622" data-start="1616">用法</strong>: "Controller programs written in supported languages (C/C++, Java, Python, MATLAB)."</li>
<li data-end="1750" data-start="1711"><strong data-end="1719" data-start="1713">解釋</strong>: 指控制機器人所需執行的程式，包括它們的移動和與環境的互動。</li>
</ul>
<p><br/>10. <strong data-end="1782" data-start="1760">VRML97 (VRML97 語言)</strong></p>
<ul data-end="1986" data-start="1786">
<li data-end="1825" data-start="1786"><strong data-end="1794" data-start="1788">解釋</strong>: 用於描述 3D 模型和環境的標準，特別用於虛擬現實或模擬。</li>
<li data-end="1937" data-start="1829"><strong data-end="1837" data-start="1831">用法</strong>: "Basic knowledge of 3D graphics and VRML97 is needed for creating custom robot models or objects."</li>
<li data-end="1986" data-start="1941"><strong data-end="1949" data-start="1943">解釋</strong>: 指 3D 模型描述語言，讓使用者可以創建或匯入自訂的機器人模型或物件。</li>
</ul>
<h2>Task6</h2>
<p><span>Task7</span></p>
<h1>Homework</h1>
<p>作業 (30%)</p>
<p>HW1 (5%): <span style="background-color: #ffff00;">建立由 Box 組成的平面四連桿機構 Webots 模擬場景</span></p>
<p style="padding-left: 30px;">part1:</p>
<p style="padding-left: 60px;">請各學員在 USB 隨身碟或個人電腦上完成 cd2025 課程所需的可攜系統配置:</p>
<p style="padding-left: 90px;">下載 <a href="http://229.cycu.org/portable_wcm2025.7z">portable_wcm2025.7z</a> (330MB, 解開壓縮後 1.4GB)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Webots_2025a.7z">Webots_2025a.7z</a> (1.5 GB, 解開後約為 2.9GB, 可單獨運作)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Webots_2025a_web.7z">Webots_2025a_web.7z</a> (171 MB, 解開壓縮後約為 1GB, 必須連網運作)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Blender4.2.7z">Blender4.2.7z</a></p>
<p style="padding-left: 30px;">part2:</p>
<p style="padding-left: 60px;">請各學員完成可攜程式系統配置後, 利用 Webots R2025a 中寬度與高度都為 0.1m 的 box 物件建立一個簡單的平面四連桿機構模擬場景.</p>
<p style="padding-left: 60px;">base (基座) 長度 1m, link1 長度 0.4m, link2 長度 0.6m, link3 長度 0.9m, 各轉軸均為 HingeJoint, joint1 旋轉速度設定為 1radian/sec.</p>
<p style="padding-left: 30px;">part3:</p>
<p style="padding-left: 60px;">模擬場景啟動後, 按下 s 鍵機構開始作動, 按下 p 鍵後機構暫停.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2025_hw1_demo.7z">cd2025_hw1_demo.7z</a></p>
<p>HW2 (5%): <span style="background-color: #ffff00;">建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景</span></p>
<p style="padding-left: 30px;">各學員請利用 CAD 系統依據 HW1 的連桿尺寸與運動方式, 配置適當大小的旋轉軸以及基座後, 利用 Webots R2025a 完成一個簡單的平面四連桿機構模擬場景.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p style="padding-left: 60px;"><a href="/downloads/fourbar_slvs.7z">fourbar_slvs.7z</a></p>
<p>HW3 (20%):<span style="background-color: #ffff00;">建立 Webots 桌上籃球遊戲機模擬系統</span></p>
<p style="padding-left: 30px;">請各分組利用CAD 系統建立一個能在電腦桌 (1600W X 700D X 740H mm) 上運作的投籃機構 (<a href="https://www.youtube.com/watch?v=LloG_Jn_TI0&amp;t=51s">參考影片</a>)後, 導入 Webots R2025a 套件, 建立一個能由使用者透過鍵盤按鍵操作, 且具備計分板的籃球遊戲機模擬系統.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p>參考資料:</p>
<p style="padding-left: 30px;"><a href="/downloads/fourbar_ball_throwing_linkage.slvs">fourbar_ball_throwing_linkage.slvs</a></p>
<p style="padding-left: 30px;"><a href="/downloads/sixbar_ball_throwing_linkage.slvs">sixbar_ball_throwing_linkage.slvs</a></p>
<p style="padding-left: 30px;"><img alt="" height="264" src="/images/fourbar_ball_throwing_linkage.gif" width="400"/></p>
<h2>HW1</h2>
<p>HW1 (5%): <span style="background-color: #ffff00;">建立由 Box 組成的平面四連桿機構 Webots 模擬場景</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW1 - 41223105</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/i9N9Zbz84Z8" width="560"></iframe></p>
<p></p>
<h2>HW2</h2>
<p>HW2 (5%): <span style="background-color: #ffff00;">建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW2 - 學員學號</p>
<p></p>
<h2>HW3</h2>
<p>HW3 (20%):<span style="background-color: #ffff00;">建立 Webots 桌上籃球遊戲機模擬系統</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW3 - 學員學號</p>
<p></p>
<h1>Midterm</h1>
<p>本課程所繳交的期中成績為學員自評之學習期望成績.</p>
<p>期中考週的自評期望成績繳交流程:</p>
<ol>
<li>整理先前所完成的各週的進度、作業網頁內容以及心得</li>
<li>拍攝期中自評影片, 上傳至 Youtube 後, 以"<span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 期中自評- 學員學號</span>"為影片標題後嵌入本頁面中</li>
<li>回填期中自評表單</li>
<li>上傳學員期中成績</li>
</ol>
<p>各週進度:</p>
<p>各週網頁內容:</p>
<p>期中心得:</p>
<p>期中自評影片:</p>
<p></p>
<p style="padding-left: 30px;"></p>
<h1>Exam</h1>
<p>Exam1 (10%): 建立 Webots 基本物件模擬場景</p>
<p style="padding-left: 30px;">各學員利用 Webots R2025a 套件中的 Shape 物件, 隨堂建立指定的機電系統模擬場景, 並利用 Python 程式進行互動控制.</p>
<p>Exam2 (10%): 利用 CAD 零組件建立模擬場景 </p>
<p style="padding-left: 30px;">各學員利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制.</p>
<p>Exam3 (20%): Webots 機電模擬場景的協同設計</p>
<p style="padding-left: 30px;">各分組利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制. 過程中各學員必須採同步協同模式, 維護從 Github Classroom 取得的分組協同倉儲以及網站.</p>
<p style="padding-left: 30px;">協同分組方式:</p>
<ol>
<li>分配學員負責利用 Solvespace 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁.</li>
<li>分配學員負責利用 NX2312 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁.</li>
<li>分配學員負責利用 Webots 建立機電系統模擬場景, 並利用 Python 程式進行控制, 過程中必須將建構過程拍成帶有說明字幕的影片上傳至分組網頁.</li>
</ol>
<h2>Exam1</h2>
<p>Exam1 (10%): 建立 Webots 基本物件模擬場景</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam1 - 41223105</p>
<p></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/5JQCb8h26CM" width="560"></iframe></p>
<p></p>
<p></p><h2>Exam2</h2>
<p>Exam2 (10%): 利用 CAD 零組件建立模擬場景</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam2 - 學員學號</p>
<h2>Exam3</h2>
<p>Exam3 (20%): Webots 機電模擬場景的協同設計</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3 - 學員學號</p>
<h1>Final</h1>
<p><span>期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%)</span></p>
<p><span>題目: <span style="background-color: #ccffcc;">Webots 動態投籃模擬系統的協同設計</span></span></p>
<p><span>說明: </span></p>
<p style="padding-left: 30px;"><span>籃框架被配置在一定範圍內, 可隨機慢速前進、後退及左右擺動, 投籃機構系統帶有一定數量的籃球, 被配置在可自由移動的輪車上.</span></p>
<p style="padding-left: 30px;"><span>操作者可利用鍵盤特定按鍵控制投籃輪車的移動並發射投籃, 每投出一球後系統透過記分板進行計分, 並由送球機構進行補球或移動輪車取球, 遊戲可進行至全部數量籃球投完為止.</span></p>
<p>請將期末協同專案執行過程、內容與心得, 製作成影片，配合字幕上傳至 Youtube 後嵌入各階段的期末報告頁面中.</p>
<p>影片標題: <span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 學員學號 - 各階段影片主題<br/></span></p>
<h1>Brython</h1>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>